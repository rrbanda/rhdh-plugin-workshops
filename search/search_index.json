{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to RHDH Plugin Workshops \ud83d\ude80","text":"<p>This site provides documentation for configuring and using various plugins in Red Hat Developer Hub.</p>"},{"location":"#available-guides","title":"\ud83d\udcda Available Guides","text":"<ul> <li>MTA Plugin Guide \u2013 Learn how to install and configure the MTA plugin in RHDH.</li> <li>Another Plugin Guide \u2013 Documentation for another RHDH plugin.</li> </ul>"},{"location":"#how-to-use-this-documentation","title":"\ud83d\udcd6 How to Use This Documentation","text":"<ol> <li>Select a plugin from the left sidebar.</li> <li>Follow the step-by-step setup and usage instructions.</li> <li>Use the search bar to quickly find topics.</li> </ol>"},{"location":"#helpful-links","title":"\ud83d\udd17 Helpful Links","text":"<ul> <li>RHDH Official Documentation</li> <li>Migration Toolkit for Applications (MTA)</li> <li>GitHub Repository</li> </ul> <p>This site is auto-generated using MkDocs with the Material theme.</p>"},{"location":"mta/","title":"MTA  Overview","text":"<p>Migration Toolkit for Applications (MTA) is an integrated assembly of tools that lets you better assess, prioritize and modernize your applications across hybrid cloud environments on Red Hat OpenShift, the industry\u2019s leading Kubernetes platform.</p> <p>Now designed for easier upgrades with more migration paths, MTA includes:</p> <p>New application inventory and assessment modules that assist organizations in managing, classifying and tagging their applications while assessing application suitability for deployment in containers, including flagging potential risks for migration strategies. Full integration with source code and binary repositories to automate the retrieval of applications for analysis along with proxy integration including HTTP and HTTPS proxy configuration managed in the user interface. Improved analysis capabilities with new analysis modes, including source and dependency modes that parse repositories to gather dependencies and add them to the overall scope of the analysis. There is also a simplified user experience to configure the analysis scope, including open source libraries. Enhanced Role-Based Access Control (RBAC) powered by Red Hat Single Sign-On, defining three new differentiated personas with different permissions to suit the needs of each user\u2014administrator, architect and migrator\u2014including credentials management for multiple credential types. Administration perspective to provide tool-wide configuration management for administrators</p>"},{"location":"mta/how_to/","title":"The following instructions will help configure and test MTA Plugin in Red Hat Developer Hub.","text":""},{"location":"mta/how_to/#prerequisites","title":"Prerequisites","text":"<p>Before you begin:</p> <ul> <li>Ensure RHDH is installed locally or on an OpenShift cluster.</li> <li>Migration Toolkit for Applications (MTA) must be installed on the OpenShift cluster.</li> <li>Run the provided script to configure the MTA client in Keycloak.</li> </ul>"},{"location":"mta/how_to/#installing-mta-on-openshift","title":"Installing MTA on OpenShift","text":"<p>Follow the official documentation for MTA 7.2:</p> <p>\ud83d\udcda Migration Toolkit for Applications 7.2 Documentation</p> <p>\ud83d\udd27 User Interface Guide (includes operator installation steps)</p>"},{"location":"mta/how_to/#configuration-rhdh-and-mta-plugin","title":"Configuration: RHDH and MTA Plugin","text":"<p>The following section is specific to the MTA plugin configuration that you need configure in <code>app-config.yaml</code></p> <pre><code>mta:\n  url: https://mta-openshift-mta.apps.cluster-xvdzv.dynamic.redhatworkshops.io\n  backendPluginVersion: \"0.3.0\"\n  backendPluginRoot: \"/opt/app-root/src/dynamic-plugins-root/backstage-community-backstage-plugin-mta-backend-0.3.0\"\n  providerAuth:\n    realm: mta\n    secret: backstage-provider-secret\n    clientID: backstage-provider\n\ndynamicPlugins:\n  frontend: \n    ianbolton.backstage-plugin-mta-frontend:\n      entityTabs:\n        - path: /mta\n          title: MTA\n          mountPoint: entity.page.mta\n      mountPoints:\n        - mountPoint: entity.page.mta/cards\n          importName: EntityMTAContent\n          config:\n            layout:\n              gridColumn:\n                lg: 'span 12'\n                md: 'span 8'\n                xs: 'span 6'\n            if:\n              allOf:\n                - isKind: component \n                - isType: service\n</code></pre>"},{"location":"mta/how_to/#mta-plugin-setup-script-for-keycloak","title":"MTA Plugin Setup Script for Keycloak","text":"<p>Use the following script to configure the <code>backstage-provider</code> client and assign necessary roles/scopes.</p> <pre><code>#!/bin/bash\n\n# Variables\nKEYCLOAK_URL=$(oc get route mta -n openshift-mta -o jsonpath='{.spec.host}')\nKEYCLOAK_URL=\"https://${KEYCLOAK_URL}/auth\"\necho \"Using Keycloak URL: $KEYCLOAK_URL\"\n\nMASTER_REALM=\"master\"\nCLIENT_ID=\"admin-cli\"\nUSERNAME=\"admin\"\nMTA_REALM=\"mta\"\n\n# Fetch the encoded password from the secret\nENCODED_PASSWORD=$(oc get secret credential-mta-rhsso -n openshift-mta -o jsonpath='{.data.ADMIN_PASSWORD}')\necho \"Encoded Password: $ENCODED_PASSWORD\"\n\n# Decode the password\nPASSWORD=$(echo $ENCODED_PASSWORD | base64 --decode)\necho \"Decoded Password: $PASSWORD\"\n\n# Obtain access token using the decoded password\nTOKEN=$(curl -s -X POST \"$KEYCLOAK_URL/realms/$MASTER_REALM/protocol/openid-connect/token\" \\\n  -d \"client_id=$CLIENT_ID\" \\\n  -d \"username=$USERNAME\" \\\n  -d \"password=$PASSWORD\" \\\n  -d \"grant_type=password\" | jq -r '.access_token')\necho \"Access Token: $TOKEN\"\n\n# Define new client JSON\nNEW_CLIENT_JSON=$(cat &lt;&lt;EOF\n{\n  \"clientId\": \"backstage-provider\",\n  \"enabled\": true,\n  \"secret\": \"backstage-provider-secret\",\n  \"redirectUris\": [\n    \"*\"\n  ],\n  \"webOrigins\": [],\n  \"protocol\": \"openid-connect\",\n  \"attributes\": {\n    \"access.token.lifespan\": \"900\"\n  },\n  \"publicClient\": false,\n  \"bearerOnly\": false,\n  \"consentRequired\": false,\n  \"standardFlowEnabled\": true,\n  \"implicitFlowEnabled\": false,\n  \"directAccessGrantsEnabled\": true,\n  \"serviceAccountsEnabled\": true\n}\nEOF\n)\n\n# Create the new client\nCREATE_RESPONSE=$(curl -s -X POST \"$KEYCLOAK_URL/admin/realms/$MTA_REALM/clients\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"$NEW_CLIENT_JSON\")\necho \"Create Client Response: $CREATE_RESPONSE\"\n\n# Get the client ID dynamically\nCLIENT_UUID=$(curl -s -X GET \"$KEYCLOAK_URL/admin/realms/$MTA_REALM/clients\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" | jq -r '.[] | select(.clientId==\"backstage-provider\") | .id')\necho \"Client UUID: $CLIENT_UUID\"\n\n# Fetch client details using the client UUID\nCLIENT_DETAILS=$(curl -s -X GET \"$KEYCLOAK_URL/admin/realms/$MTA_REALM/clients/$CLIENT_UUID\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\")\necho \"Client Details: $CLIENT_DETAILS\"\n\n# Fetch service account user ID for the client\nSERVICE_ACCOUNT_USER_ID=$(curl -s -X GET \"$KEYCLOAK_URL/admin/realms/$MTA_REALM/clients/$CLIENT_UUID/service-account-user\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" | jq -r '.id')\necho \"Service Account User ID: $SERVICE_ACCOUNT_USER_ID\"\n\n# Fetch role IDs\nTACKLE_ADMIN_ROLE_ID=$(curl -s -X GET \"$KEYCLOAK_URL/admin/realms/$MTA_REALM/roles/tackle-admin\" \\\n  -H \"Authorization: Bearer $TOKEN\" | jq -r '.id')\necho \"Tackle Admin Role ID: $TACKLE_ADMIN_ROLE_ID\"\n\nDEFAULT_ROLES_MTA_ID=$(curl -s -X GET \"$KEYCLOAK_URL/admin/realms/$MTA_REALM/roles/default-roles-mta\" \\\n  -H \"Authorization: Bearer $TOKEN\" | jq -r '.id')\necho \"Default Roles MTA ID: $DEFAULT_ROLES_MTA_ID\"\n\n# Prepare role assignment JSON using the fetched IDs\nASSIGN_ROLES_PAYLOAD=$(cat &lt;&lt;EOF\n[\n  {\n    \"id\": \"$TACKLE_ADMIN_ROLE_ID\",\n    \"name\": \"tackle-admin\"\n  },\n  {\n    \"id\": \"$DEFAULT_ROLES_MTA_ID\",\n    \"name\": \"default-roles-mta\"\n  }\n]\nEOF\n)\necho \"Assign Roles Payload: $ASSIGN_ROLES_PAYLOAD\"\n\n\n# Assign roles to the service account\nASSIGN_ROLES_RESPONSE=$(curl -s -X POST \"$KEYCLOAK_URL/admin/realms/$MTA_REALM/users/$SERVICE_ACCOUNT_USER_ID/role-mappings/realm\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"$ASSIGN_ROLES_PAYLOAD\")\necho \"Assign Roles Response: $ASSIGN_ROLES_RESPONSE\"\n\necho \"Roles assigned to the service account of client 'backstage-provider'.\"\n\n\n# Fetch all client scopes\nCLIENT_SCOPES=$(curl -s \"$KEYCLOAK_URL/admin/realms/$MTA_REALM/client-scopes\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\")\n\n# Define desired scopes\nDESIRABLE_SCOPES=(\n  \"acr\" \"addons:delete\" \"addons:get\" \"addons:post\" \"addons:put\" \"address\"\n  \"adoptionplans:post\" \"analyses:delete\" \"analyses:get\" \"analyses:post\" \"analyses:put\"\n  \"applications.analyses:delete\" \"applications.analyses:get\" \"applications.analyses:post\" \"applications.analyses:put\"\n  \"applications.assessments:get\" \"applications.assessments:post\" \"applications.bucket:delete\" \"applications.bucket:get\"\n  \"applications.bucket:post\" \"applications.bucket:put\" \"applications.facts:delete\" \"applications.facts:get\"\n  \"applications.facts:post\" \"applications.facts:put\" \"applications.stakeholders:put\" \"applications.tags:delete\"\n  \"applications.tags:get\" \"applications.tags:post\" \"applications.tags:put\" \"applications:delete\" \"applications:get\"\n  \"applications:post\" \"applications:put\" \"archetypes.assessments:get\" \"archetypes.assessments:post\"\n  \"archetypes:delete\" \"archetypes:get\" \"archetypes:post\" \"archetypes:put\" \"assessments:delete\" \"assessments:get\"\n  \"assessments:post\" \"assessments:put\" \"buckets:delete\" \"buckets:get\" \"buckets:post\" \"buckets:put\"\n  \"businessservices:delete\" \"businessservices:get\" \"businessservices:post\" \"businessservices:put\" \"cache:delete\"\n  \"cache:get\" \"dependencies:delete\" \"dependencies:get\" \"dependencies:post\" \"dependencies:put\" \"email\"\n  \"files:delete\" \"files:get\" \"files:post\" \"files:put\" \"identities:delete\" \"identities:get\" \"identities:post\"\n  \"identities:put\" \"imports:delete\" \"imports:get\" \"imports:post\" \"imports:put\" \"jobfunctions:delete\"\n  \"jobfunctions:get\" \"jobfunctions:post\" \"jobfunctions:put\" \"microprofile-jwt\" \"migrationwaves:delete\"\n  \"migrationwaves:get\" \"migrationwaves:post\" \"migrationwaves:put\" \"offline_access\" \"phone\" \"profile\"\n  \"proxies:delete\" \"proxies:get\" \"proxies:post\" \"proxies:put\" \"questionnaires:delete\" \"questionnaires:get\"\n  \"questionnaires:post\" \"questionnaires:put\" \"reviews:delete\" \"reviews:get\" \"reviews:post\" \"reviews:put\"\n  \"roles\" \"rulesets:delete\" \"rulesets:get\" \"rulesets:post\" \"rulesets:put\" \"settings:delete\" \"settings:get\"\n  \"settings:post\" \"settings:put\" \"stakeholdergroups:delete\" \"stakeholdergroups:get\" \"stakeholdergroups:post\"\n  \"stakeholdergroups:put\" \"stakeholders:delete\" \"stakeholders:get\" \"stakeholders:post\" \"stakeholders:put\"\n  \"tagcategories:delete\" \"tagcategories:get\" \"tagcategories:post\" \"tagcategories:put\" \"tags:delete\" \"tags:get\"\n  \"tags:post\" \"tags:put\" \"targets:delete\" \"targets:get\" \"targets:post\" \"targets:put\" \"tasks.bucket:delete\"\n  \"tasks.bucket:get\" \"tasks.bucket:post\" \"tasks.bucket:put\" \"tasks:delete\" \"tasks:get\" \"tasks:post\"\n  \"tasks:put\" \"tickets:delete\" \"tickets:get\" \"tickets:post\" \"tickets:put\" \"trackers:delete\" \"trackers:get\"\n  \"trackers:post\" \"trackers:put\"\n)\n\n\n# Find the IDs of the desired scopes and store them in a string\nSCOPE_IDS=\"\"\nfor SCOPE_NAME in \"${DESIRABLE_SCOPES[@]}\"; do\n  SCOPE_ID=$(echo $CLIENT_SCOPES | jq -r --arg SCOPE_NAME \"$SCOPE_NAME\" '.[] | select(.name == $SCOPE_NAME) | .id')\n  if [ -n \"$SCOPE_ID\" ]; then\n    SCOPE_IDS=\"$SCOPE_IDS $SCOPE_ID\"\n    echo \"$SCOPE_NAME ID: $SCOPE_ID\"\n  else\n    echo \"Error: Scope $SCOPE_NAME not found.\"\n  fi\ndone\n\n# Client UUID\nCLIENT_UUID=$(curl -s -X GET \"$KEYCLOAK_URL/admin/realms/$MTA_REALM/clients?clientId=backstage-provider\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" | jq -r '.[0].id')\necho \"Client UUID: $CLIENT_UUID\"\n\n# Assign the found scopes to the client\nfor SCOPE_ID in $SCOPE_IDS; do\n  ASSIGN_SCOPE_RESPONSE=$(curl -s -X PUT \"$KEYCLOAK_URL/admin/realms/$MTA_REALM/clients/$CLIENT_UUID/default-client-scopes/$SCOPE_ID\" \\\n    -H \"Authorization: Bearer $TOKEN\" \\\n    -H \"Content-Type: application/json\")\n  echo \"Assigned Scope ID $SCOPE_ID to client $CLIENT_UUID\"\ndone\n\necho \"Assigned desired scopes to the client 'backstage-provider'.\"\n</code></pre>"},{"location":"mta/how_to/#dynamic-pluginsyaml-configuration","title":"<code>dynamic-plugins.yaml</code> Configuration","text":""},{"location":"mta/how_to/#ensure-your-plugin-list-includes-the-following-entries","title":"Ensure your plugin list includes the following entries:","text":"<pre><code>includes:\n  - dynamic-plugins.default.yaml\n\nplugins: \n  - disabled: false\n    package: \"@backstage-community/backstage-plugin-mta-backend@0.3.0\"\n    integrity: sha512-gEmEEa1Fuh+jRqGiLg5JgrBGj+rdRxohnGuIcXb6iTuv2kG0gqkLHu/U1smm+rdBZ78h8lnbrCsEMPKwvjWs+A==\n  - disabled: false\n    package: \"@ianbolton/backstage-plugin-mta-frontend@0.1.8\"\n    integrity: sha512-OIzO+6HMAv78sN4a6LjB928AX0StJXY3PlhkXJRt/Er+AO+2m2MGvTkS0QzZGvoBoquwQjV+s+CFWDnhrGCAAQ==\n  - disabled: false\n    package: \"@backstage-community/backstage-plugin-catalog-backend-module-mta-entity-provider@0.2.0\"\n    integrity: sha512-M2s8SN3/tgav+1q1RWVgxAA0V/bRFeT4GesMMWh7/WpFcrqAe65fUJ1YrTPeDavtjW27YE/RZCjwdM9xtPoc5w==\n  - disabled: false\n    package: \"@backstage-community/backstage-plugin-scaffolder-backend-module-mta@0.3.0\"\n    integrity: sha512-dGdjnBGmmMtvQ46LF1QUzlu+C1fnLyI0iljTJfwToOiZOxfb1vl/1gsPfT74kLSit1fYLPm8N+weS0i5+NqS8A==\n</code></pre>"},{"location":"mta/how_to/#using-mta-in-red-hat-developer-hub","title":"Using MTA in Red Hat Developer Hub","text":""},{"location":"mta/how_to/#1-access-developer-hub","title":"1. Access Developer Hub","text":"<p>Navigate to your running instance of Red Hat Developer Hub in the browser.</p> <p></p>"},{"location":"mta/how_to/#2-register-a-template","title":"2. Register a Template","text":"<p>On the RHDH UI , Click register existing component to import MTA template available at https://github.com/backstage/community-plugins/blob/main/workspaces/mta/create-application-template.yaml </p> <p></p>"},{"location":"mta/how_to/#3-verify-template-in-catalog","title":"3. Verify Template in Catalog","text":"<p>Click Catalog and look for the registered template appears as an entity as shown below</p> <p></p>"},{"location":"mta/how_to/#4-create-an-mta-application","title":"4. Create an MTA Application","text":"<p>Choose the template Onboard Application to MTA and perform as shown in the following screenshots.</p> <p></p> <ul> <li>Add the name of the application to be onboarded to MTA</li> </ul> <p></p> <ul> <li>Fill Application Metadata</li> </ul> <p></p> <ul> <li>Confirm and Submit</li> </ul> <p></p>"},{"location":"mta/how_to/#5-run-mta-analysis","title":"5. Run MTA Analysis","text":"<p>Once the application is created, go to the entity page and launch an MTA analysis.</p> <p></p>"},{"location":"mta/how_to/#6-check-analysis-status-in-rhdh","title":"6. Check Analysis Status in RHDH","text":"<p>Track the analysis progress directly within the Developer Hub UI under the MTA tab.</p> <p></p>"},{"location":"mta/how_to/#7-confirm-in-mta-web-console","title":"7. Confirm in MTA Web Console","text":"<p>Optionally, verify the same analysis from the MTA UI running on OpenShift.</p> <p></p>"},{"location":"mta/how_to/#8-final-status-in-rhdh","title":"8. Final Status in RHDH","text":"<p>After completion, return to the Developer Hub entity page to view final analysis output and recommendations.</p> <p></p>"}]}